name "sempr"

using_library "hybrit_rock_msgs"
import_types_from "hybrit_rock_msgs"

# Optionally declare the version number
# version "0.1"

# TODO: should this be the place for "message" definitions, the environment/sempr_rock thus be removed?
# import_types_from "semprTypes.hpp"

using_library "sempr-core"
using_library "sempr_rock"
using_library "sempr-rete-reasoning"
using_library "sempr-anchoring"
#using_library "hybrit_rock_msgs"
#import_types_from "sempr_rock/ObjectMessages.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "std"
import_types_from "mars"
import_types_from "base"
import_types_from "semprTypes.hpp" # for the config object

import_types_from "sempr_types"


# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the sempr namespace.
task_context "SEMPREnvironment" do
    needs_configuration

    property("rdf_file", "/std/string").
        doc("Path to the RDF file to initialize SEMPR with.")
    property("rules_file", "/std/string").
        doc("Path to the file with rules for the soprano module.")

    property("anchoring_config", "/sempr/AnchoringConfig").
        doc("Config settings for the object anchoring algorithms")

    # input_port "input", "/std/string"
    # output_port "output", "int"

    # input from object detection
    input_port "detectionArray", "/mars/Detection3DArray"

    # input from the astronaut detection
    input_port "astronautPose", "/base/samples/RigidBodyState"

    # output objects for visualization purposes
    output_port "objectUpdates", "/sempr_rock/SpatialObject"
    # output objects in a batch for visualization purposes.
    # Why? Because I can't figure out how change the connection to the vizkit plugin from data to buffered
    # and most of the messages send over objectUpdates are just lost.
    output_port "objectUpdatesBatch", "/std/vector</sempr_rock/SpatialObject>"

    # we need to transform the detection from the camera frame to the map frame:
    # - tell the transformer we need "a" transformation between two frames
    #   (the names are local and need to be configured at runtime)
    # - tell the transformer we are going to apply the transformation on data from the
    #   detectionArray port, so that it aligns the streams
    transformer do
        transform "camera", "map"
        align_port "detectionArray"
        max_latency 0.5
    end

    # publish update messages just like in hybrit, to reuse the hybrit/orogen/hybrit_monitors
    output_port("env_update", "/hybrit_rock_msgs/EnvUpdate")

    # Trigger a republish of all known objects on the objectUpdates port
    operation('republish')

    # SPARQL-Query
    # argument must be a valid SPARQL query (e.g.: SELECT ?a WHERE {?a rdf:type sempr:CoffeeMug.}).
    # A few namespaces are already predefined: rdf, rdfs, owl, sempr, xsd
    operation('answerQuery').
        returns('/sempr_rock/SPARQLResult').
        argument('arg0', '/std/string')

    # Simplified query, returns whole triples with a given pattern.
    # In contrast to "answerQuery" (sparql), this returns the full string representation of
    # the triple-parts. So a URI resource will include pointy brackets, like "<http://.../foo#bar>",
    # etc. Just as the triples are stored internally.
    # For every part of the triple you can either fully specify its content (including brackets etc),
    # or use "*" as a wildcard. (Don't mix it! Either "*" or "<fully-specified-thing>",
    # but **not** "<http://something/Fo*>"
    operation('listTriples').
        returns('/std/vector</sempr_rock/Triple>').
        argument('subject', '/std/string').
        argument('predicate', '/std/string').
        argument('object', '/std/string')

    # Returns a dot string with the explanation for the given triple.
    # maxDepth limits the depth of the explanation, e.g.
    #   maxDepth = 1 only lists rules that were used to get the triple,
    #   maxDepth = 2 also shows the triples needed for those rules,
    #   maxDepth = 3 shows the rules those triples originated from,
    #   etc.
    # vertical sets changes to a vertical graph layout
    operation('explainTriple').
        returns('/std/string').
        argument('triple', '/sempr_rock/Triple').
        argument('maxDepth', 'int').
        argument('vertical', 'bool')

    # Add an assertion to an object.
    # Adds an rdf triple that is bound to the given object (will be removed together with the
    # object)
    # returns false if the object does not exist
    operation('addObjectAssertion').
        returns('/bool').
        argument('arg0', '/sempr_rock/ObjectAssertion')


    # Adds a global assertion in form of an rdf triple.
    # TODO: This is a candidate for a port...
    operation('addTriple').
        returns('/bool').
        argument('arg0', '/sempr_rock/Triple')

    # TODO: ClearAssertions?
    # TODO: RemoveTriple?
    operation('removeTriple').
        returns('/bool').
        argument('entity', '/std/string').
        argument('triple', '/sempr_rock/Triple')

    # Returns the pose of an object given it's id in the environment representation.
    operation('getObjectPose').
        returns('/base/Pose').
        argument('arg0', '/std/string')

    # Returns all objects of a given type in the specified cone
    operation('getObjectsInCone').
        returns('/std/vector</std/string>').
        argument('direction', '/base/Pose').
        argument('length', 'float').
        argument('angle', 'float').
        argument('type', '/std/string')

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    # port_driven "input"
    # By default, the task will be periodic with a period of 0.1
    # periodic 0.1
    port_driven "detectionArray", "astronautPose"
end


# Used to test the connection to the environment representation. My attempt to use the
# operations of the SEMPREnvironment from another component. I guess this is *not* the intended
# way of using it, since it is not described in the orogen/rock documentation. Only the orocos
# documentation provides some hints on how to do this, see:
# http://www.orocos.org/stable/documentation/rtt/v2.x/doc-xml/orocos-components-manual.html
# search for "OperationsCaller", or "getPeer("ATask")", ...
task_context "SEMPRTestDummy" do
    needs_configuration

    # how can I define that this task requires a sempr environment with the given operations?
    # well.. at least a property to set the name of the component would be useful I guess.
    property "sempr_task_name", "/std/string"

    periodic 1.0
end
